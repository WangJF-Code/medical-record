<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.nickel.medicalrecord.repository.IFollowupRecordsMapper">

    <resultMap id="ResultMapFollowupRecordsDTO" type="com.nickel.medicalrecord.model.dto.FollowupRecordsDTO">
        <id column="id" property="id"/>
        <result column="patientId" property="patientId"/>
        <result column="hospitalRecordsId" property="hospitalRecordsId"/>
        <result column="followupType" property="followupType"/>
        <result column="cycle" property="cycle"/>
        <result column="cycleUnit" property="cycleUnit"/>
        <result column="cycleFloat" property="cycleFloat"/>
        <result column="dead" property="dead"/>
        <result column="deadTime" property="deadTime"/>
        <result column="causeOfDeath" property="causeOfDeath"/>
        <result column="livingStatus" property="livingStatus"/>
        <result column="city" property="city"/>
        <result column="address" property="address"/>
        <result column="description" property="description"/>
        <result column="createTime" property="createTime"/>
        <result column="updateTime" property="updateTime"/>
        <result column="deleted" property="deleted"/>
        <association property="patient" javaType="com.nickel.medicalrecord.model.dto.PatientDTO">
            <id column="patientId" property="id"/>
            <result column="userName" property="userName"/>
            <result column="sex" property="sex"/>
            <result column="IDCard" property="IDCard"/>
            <result column="age" property="age"/>
            <result column="phoneNumber" property="phoneNumber"/>
            <result column="nation" property="nation"/>
            <result column="patient_livingStatus" property="livingStatus"/>
            <result column="maritalStatus" property="maritalStatus"/>
            <result column="educationDegree" property="educationDegree"/>
            <result column="medicalInsuranceType" property="medicalInsuranceType"/>
            <result column="job" property="job"/>
            <result column="income" property="income"/>
            <result column="patient_city" property="city"/>
            <result column="patient_address" property="address"/>
        </association>
    </resultMap>
    <sql id="FollowupRecordsDTO_Column_List">
        followup_records.id,
        followup_records.patientId,
        followup_records.hospitalRecordsId,
        followup_records.followupType,
        followup_records.cycle,
        followup_records.cycleUnit,
        followup_records.cycleFloat,
        followup_records.dead,
        followup_records.deadTime,
        followup_records.causeOfDeath,
        followup_records.livingStatus,
        followup_records.city,
        followup_records.address,
        followup_records.description,
        followup_records.createTime,
        followup_records.updateTime,
        followup_records.deleted,
        patient.userName,
        patient.sex,
        patient.IDCard,
        patient.age,
        patient.phoneNumber,
        patient.nation,
        patient.livingStatus AS patient_livingStatus,
        patient.maritalStatus,
        patient.educationDegree,
        patient.medicalInsuranceType,
        patient.job,
        patient.income,
        patient.city         AS patient_city,
        patient.address      AS patient_address
    </sql>
    <select id="selectByPrimaryKey" parameterType="java.lang.Integer"
            resultType="com.nickel.medicalrecord.model.entity.FollowupRecords">
        select id,
               patientId,
               hospitalRecordsId,
               followupType,
               `cycle`,
               cycleUnit,
               cycleFloat,
               dead,
               deadTime,
               causeOfDeath,
               livingStatus,
               city,
               address,
               description,
               createTime,
               updateTime,
               deleted
        from followup_records
        where id = #{id}
    </select>
    <select id="selectList" resultMap="ResultMapFollowupRecordsDTO"
            parameterType="com.nickel.medicalrecord.model.dto.FollowupRecordsConditionDTO">
        SELECT
        <include refid="FollowupRecordsDTO_Column_List"/>
        FROM followup_records
        LEFT JOIN patient ON patient.id = followup_records.patientId
        WHERE followup_records.deleted = #{deleted}
        <if test="hospitalRecordsId != null">
            AND followup_records.hospitalRecordsId = #{hospitalRecordsId}
        </if>
        <if test="patientId != null">
            AND followup_records.patientId = #{patientId}
        </if>
        <if test="dead != null">
            AND followup_records.dead = #{dead}
        </if>
        <if test="userName != null">
            AND patient.userName = #{userName}
        </if>
        <if test="sex != null">
            AND patient.sex = #{sex}
        </if>
        ORDER BY followup_records.createTime DESC
    </select>
    <select id="selectInfo" resultMap="ResultMapFollowupRecordsDTO">
        SELECT
        <include refid="FollowupRecordsDTO_Column_List"/>
        FROM followup_records
        LEFT JOIN patient ON patient.id = followup_records.patientId
        WHERE followup_records.id = #{id}
    </select>
    <select id="findCount" resultType="java.lang.Integer"
            parameterType="com.nickel.medicalrecord.model.dto.FollowupRecordsConditionDTO">
        SELECT
        COUNT(followup_records.id)
        FROM followup_records
        LEFT JOIN patient ON patient.id = followup_records.patientId
        WHERE followup_records.deleted = #{deleted}
        <if test="hospitalRecordsId != null">
            AND followup_records.hospitalRecordsId = #{hospitalRecordsId}
        </if>
        <if test="patientId != null">
            AND followup_records.patientId = #{patientId}
        </if>
        <if test="dead != null">
            AND followup_records.dead = #{dead}
        </if>
        <if test="userName != null">
            AND patient.userName = #{userName}
        </if>
        <if test="sex != null">
            AND patient.sex = #{sex}
        </if>
    </select>
    <select id="findPage" resultMap="ResultMapFollowupRecordsDTO">
        SELECT
        <include refid="FollowupRecordsDTO_Column_List"/>
        FROM followup_records
        LEFT JOIN patient ON patient.id = followup_records.patientId
        WHERE followup_records.deleted = #{conditionDTO.deleted}
        <if test="conditionDTO.hospitalRecordsId != null">
            AND followup_records.hospitalRecordsId = #{conditionDTO.hospitalRecordsId}
        </if>
        <if test="conditionDTO.patientId != null">
            AND followup_records.patientId = #{conditionDTO.patientId}
        </if>
        <if test="conditionDTO.dead != null">
            AND followup_records.dead = #{conditionDTO.dead}
        </if>
        <if test="conditionDTO.userName != null">
            AND patient.userName = #{conditionDTO.userName}
        </if>
        <if test="conditionDTO.sex != null">
            AND patient.sex = #{conditionDTO.sex}
        </if>
        ORDER BY followup_records.createTime DESC
        LIMIT #{index}, #{size}
    </select>
    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete
        from followup_records
        where id = #{id}
    </delete>
    <insert id="insert" keyColumn="id" keyProperty="id"
            parameterType="com.nickel.medicalrecord.model.entity.FollowupRecords" useGeneratedKeys="true">
        insert into followup_records (patientId, hospitalRecordsId, followupType,
                                      `cycle`, cycleUnit, cycleFloat,
                                      dead, deadTime, causeOfDeath,
                                      livingStatus, city, address,
                                      description, createTime, updateTime,
                                      deleted)
        values (#{patientId}, #{hospitalRecordsId}, #{followupType},
                #{cycle}, #{cycleUnit}, #{cycleFloat},
                #{dead}, #{deadTime}, #{causeOfDeath},
                #{livingStatus}, #{city}, #{address},
                #{description}, #{createTime}, #{updateTime},
                #{deleted})
    </insert>
    <insert id="insertSelective" keyColumn="id" keyProperty="id"
            parameterType="com.nickel.medicalrecord.model.entity.FollowupRecords" useGeneratedKeys="true">
        insert into followup_records
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="patientId != null">
                patientId,
            </if>
            <if test="hospitalRecordsId != null">
                hospitalRecordsId,
            </if>
            <if test="followupType != null">
                followupType,
            </if>
            <if test="cycle != null">
                `cycle`,
            </if>
            <if test="cycleUnit != null">
                cycleUnit,
            </if>
            <if test="cycleFloat != null">
                cycleFloat,
            </if>
            <if test="dead != null">
                dead,
            </if>
            <if test="deadTime != null">
                deadTime,
            </if>
            <if test="causeOfDeath != null">
                causeOfDeath,
            </if>
            <if test="livingStatus != null">
                livingStatus,
            </if>
            <if test="city != null">
                city,
            </if>
            <if test="address != null">
                address,
            </if>
            <if test="description != null">
                description,
            </if>
            <if test="createTime != null">
                createTime,
            </if>
            <if test="updateTime != null">
                updateTime,
            </if>
            <if test="deleted != null">
                deleted,
            </if>
        </trim>
        <trim prefix="values (" suffix=")" suffixOverrides=",">
            <if test="patientId != null">
                #{patientId},
            </if>
            <if test="hospitalRecordsId != null">
                #{hospitalRecordsId},
            </if>
            <if test="followupType != null">
                #{followupType},
            </if>
            <if test="cycle != null">
                #{cycle},
            </if>
            <if test="cycleUnit != null">
                #{cycleUnit},
            </if>
            <if test="cycleFloat != null">
                #{cycleFloat},
            </if>
            <if test="dead != null">
                #{dead},
            </if>
            <if test="deadTime != null">
                #{deadTime},
            </if>
            <if test="causeOfDeath != null">
                #{causeOfDeath},
            </if>
            <if test="livingStatus != null">
                #{livingStatus},
            </if>
            <if test="city != null">
                #{city},
            </if>
            <if test="address != null">
                #{address},
            </if>
            <if test="description != null">
                #{description},
            </if>
            <if test="createTime != null">
                #{createTime},
            </if>
            <if test="updateTime != null">
                #{updateTime},
            </if>
            <if test="deleted != null">
                #{deleted},
            </if>
        </trim>
    </insert>
    <update id="updateByPrimaryKeySelective" parameterType="com.nickel.medicalrecord.model.entity.FollowupRecords">
        update followup_records
        <set>
            <if test="patientId != null">
                patientId = #{patientId},
            </if>
            <if test="hospitalRecordsId != null">
                hospitalRecordsId = #{hospitalRecordsId},
            </if>
            <if test="followupType != null">
                followupType = #{followupType},
            </if>
            <if test="cycle != null">
                `cycle` = #{cycle},
            </if>
            <if test="cycleUnit != null">
                cycleUnit = #{cycleUnit},
            </if>
            <if test="cycleFloat != null">
                cycleFloat = #{cycleFloat},
            </if>
            <if test="dead != null">
                dead = #{dead},
            </if>
            <if test="deadTime != null">
                deadTime = #{deadTime},
            </if>
            <if test="causeOfDeath != null">
                causeOfDeath = #{causeOfDeath},
            </if>
            <if test="livingStatus != null">
                livingStatus = #{livingStatus},
            </if>
            <if test="city != null">
                city = #{city},
            </if>
            <if test="address != null">
                address = #{address},
            </if>
            <if test="description != null">
                description = #{description},
            </if>
            <if test="updateTime != null">
                updateTime = #{updateTime},
            </if>
            <if test="deleted != null">
                deleted = #{deleted},
            </if>
        </set>
        where id = #{id}
    </update>
    <update id="updateByPrimaryKey" parameterType="com.nickel.medicalrecord.model.entity.FollowupRecords">
        update followup_records
        set patientId         = #{patientId},
            hospitalRecordsId = #{hospitalRecordsId},
            followupType      = #{followupType},
            `cycle`           = #{cycle},
            cycleUnit         = #{cycleUnit},
            cycleFloat        = #{cycleFloat},
            dead              = #{dead},
            deadTime          = #{deadTime},
            causeOfDeath      = #{causeOfDeath},
            livingStatus      = #{livingStatus},
            city              = #{city},
            address           = #{address},
            description       = #{description},
            updateTime        = #{updateTime},
            deleted           = #{deleted}
        where id = #{id}
    </update>
</mapper>